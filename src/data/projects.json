{
  "projects": [
    {
      "id": "movie-database",
      "title": "Movie Database",
      "description": "A React movie website with TMDB API for real-time information is about movies. It features responsive design, dynamic filtering, and pages with detailed information. As well a React movie website is built with TanStack Query for data-fetching optimization and Tailwind CSS, for responsive styling. Users can browse trending/upcoming movies with their favorite feature.",
      "image": "movie.jpg",
      "tools": "React | TanStack Query | TailwindCSS | React Router",
      "overview": {
        "title": "Project Overview",
        "duration": "Project Duration: 4 weeks",
        "collaboration": "Collaboration: Team of four",
        "rolesTitle": "Role(s): Developer | UI/UX Designer | Team Lead",
        "overviewPoints": [
          "a web application developed using React that”,  “uses the TMDB (The Movie Database) API to provide users with a comprehensive platform by which they can search and find movies.",
          "user can view detailed information like ratings, release dates, and synopses, and find popular, upcoming, and highly-rated movies.",
          "the application has a responsive design”, “is offers seamless usability on devices, dynamic filtering and sorting for enhanced user experience.",
          "the project offers a fast, interactive, and visually appealing interface for movie lovers."
        ]
      },
      "requirements": {
        "title": "Project Requirements",
        "requirementsPoints": [
          "develop a movie database application from using themoviedb.org API",
          "we used the TanStack Query Library to accomplish API fetches.",
          "the main page needed to display a grid of at least 12 films",
          "it can sort films by popularity, top rated, currently showing, and upcoming movies.",
          "every film card would link to a special movie page",
          "each page would display more information like an overview and a backdrop image.",
          "favorites page was also added to display all the saved films."
        ]
      },
      "reflections": {
        "title": "Reflections",
        "sectionTitle1": "How did I feel about it?",
        "sectionContent": "Developing the React database project, as it taught me more about state management and API integration. I felt proud when I finally managed to implement features like dynamic sorting and a synchronized favorites system. However debugging and optimizing performance was frustrating at times. Overall, they ultimately made me a better developer.",
        "sectionTitle2": "What did I learn?",
        "sectionContent2": [
          "fetching Data with TanStack Query",
          "styling website with Tailwind",
          "installing both dev and regular dependencies",
          "trouble shooting errors"
        ]
      },
      "button1Link": "https://bcotten.ca/movie-database",
      "button2Link": "https://github.com/BCotten/react-movie-database",
      "image1": "movie1.jpg",
      "image2": "movie2.jpg"
    },
    {
      "id": "bnmc-mri-clinic",
      "title": "BNMC MRI Clinic",
      "description": "WordPress site for medical imaging center features service listings, staff profiles, and patient resources. Online inquiry forms are integrated with cancellation policy compliance and responsive design for healthcare providers and patients.",
      "image": "mri.jpg",
      "tools": "Wordpress| Gravity Forms | PostHog",
      "overview": {
        "title": "Project Overview",
        "duration": "Project Duration: 4 weeks",
        "collaboration": "Collaboration: Team of four",
        "rolesTitle": "Role(s): Developer | UI/UX Designer",
        "overviewPoints": [
          "developed patient portal with MRI preparation guides and policy documents",
          "developed physician-facing service listings with referral capabilities",
          "added contact forms with required policy acknowledgments",
          "developed staff biography pages with extensive career highlights"
        ]
      },
      "requirements": {
        "title": "Project Requirements",
        "requirementsPoints": [
          "develop accessible layout for patients and physicians",
          "incorporated cancellation policy into every reservation flow",
          "highlights MRI devices and staff qualifications",
          "enhances load time for patient education PDFs"
        ]
      },
      "reflections": {
        "title": "Reflections",
        "sectionTitle1": "How did I feel about it?",
        "sectionContent": "Implementing a contact form that had all fields was detail-oriented work. Working with a group of developers on a WordPress site gave us experience working on using version control.",
        "sectionTitle2": "What did I learn?",
        "sectionContent2": [
          "git collaboration for WordPress",
          "creating forms with Gravity Forms",
          "adding Go maps and connecting API",
          "styling with block editor"
        ]
      },
      "button1Link": "https://bnmcmriclinic.bcitwebdeveloper.ca",
      "button2Link": "",
      "image1": "mri1.jpg",
      "image2": "mri2.jpg"
    },
    {
      "id": "black-jack-game",
      "title": "Black Jack Game",
      "description": "Pure JavaScript was implemented to create a classic casino blackjack with responsive UI controls and computer-automated dealer logic. Users play against CPU-dealer with strategic hit/hold, ace value maximization, and real-time hand evaluation.",
      "image": "blackJack.jpg",
      "tools": "HTML | CSS | JavaScript",
      "overview": {
        "title": "Project Overview",
        "duration": "Project Duration: 4 weeks",
        "collaboration": "Collaboration: Solo",
        "rolesTitle": "Role(s): Developer | UI/UX Designer",
        "overviewPoints": [
          "pure JavaScript DOM-manipulation built card game",
          "examines complex card value calculations such as dynamic ace valuation (1 or 11)",
          "features computer-automated dealer AI according to casino-standard rules (hit when <17)",
          "adds win/lose conditions with instant feedback and new game functionality"
        ]
      },
      "requirements": {
        "title": "Project Requirements",
        "requirementsPoints": [
          "add card value calculation system treating aces as 1/11 dynamically",
          "add player decision flow with hit/hold buttons and game state management",
          "implement dealer AI under strict hit-on-<17 rules",
          "construct real-time score comparison system with win/lose conditions",
          "design responsive UI with card display animations and game controls"
        ]
      },
      "reflections": {
        "title": "Reflections",
        "sectionTitle1": "How did I feel about it?",
        "sectionContent": "Developing this game pushed my understanding of state management in plain JavaScript. Although it was frustrating to debug sometimes, such as the complicated card value calculations, nevertheless getting the dealer AI up and running was hugely satisfying. Having to accomplish smooth UI interactions without frameworks was both limiting and educational.",
        "sectionTitle2": "What did I learn?",
        "sectionContent2": [
          "DOM manipulation without frameworks",
          "git collaboration for WordPress",
          "complex conditional logic flows",
          "CSS animations for card dealing effects"
        ]
      },
      "button1Link": "https://bcotten.ca/black-jack/",
      "button2Link": "https://github.com/BCotten/black-jack",
      "image1": "blackJack1.jpg",
      "image2": "blackJack2.jpg"
    }
  ]
}
